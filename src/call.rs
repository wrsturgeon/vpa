/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */

//! Calls both now and, in textual form, in the autogenerated source code.

#[cfg(feature = "quickcheck")]
use {
    core::convert::identity,
    quickcheck::{Arbitrary, Gen},
};

/// Both a function pointer and a source-code representation.
#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct Call<I, O> {
    /// Function pointer.
    ptr: fn(I) -> O,
    /// Source-code representation.
    src: String,
}

impl<I, O> Call<I, O> {
    /// Construct a new `Call` from a function pointer and a source-code representation.
    #[inline(always)]
    pub const fn new(ptr: fn(I) -> O, src: String) -> Self {
        Self { ptr, src }
    }
}

#[cfg(feature = "quickcheck")]
impl Arbitrary for Call<(), ()> {
    #[inline]
    fn arbitrary(g: &mut Gen) -> Self {
        Self {
            ptr: identity,
            src: Arbitrary::arbitrary(g),
        }
    }
    #[inline]
    fn shrink(&self) -> Box<dyn Iterator<Item = Self>> {
        Box::new(self.src.shrink().map(|src| Self { ptr: identity, src }))
    }
}
